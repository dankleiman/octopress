<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dan Kleiman]]></title>
  <link href="http://dankleiman.github.io/atom.xml" rel="self"/>
  <link href="http://dankleiman.github.io/"/>
  <updated>2014-07-11T09:09:54-04:00</updated>
  <id>http://dankleiman.github.io/</id>
  <author>
    <name><![CDATA[Dan Kleiman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Launching Datastroyer]]></title>
    <link href="http://dankleiman.github.io/blog/2014/07/02/launching-datastroyer/"/>
    <updated>2014-07-02T21:29:17-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/07/02/launching-datastroyer</id>
    <content type="html"><![CDATA[<p>I&rsquo;m very excited to announce that <a href="https://github.com/craigmcginley">Craig McGinley</a> and I have launched <a href="http://datastroyer.herokuapp.com/">Datastroyer</a>.</p>

<p>Datastroyer is our online tool for searching JSON objects and returning the correct path to any value.</p>

<!--more-->


<p>Previously, I wrote about the <a href="http://dankleiman.github.io/blog/2014/05/25/building-a-learning-tool-for-compound-data-structures/">challenges of parsing compound data structures</a>. For someone just learning to code and work with data, one of the biggest challenges was learning to read syntax.</p>

<p>One particularly challenging &ldquo;reading problem&rdquo; is figuring out how to reference a specific value nested inside a tangle of hashes and arrays. Not knowing how the object is structured, in terms of size, layers of nesting, or type of nested objects initially made this problem really confusing!</p>

<p>Eventually we learned how to traverse the whole structure and efficiently store the path we were going down as we went.</p>

<p>Craig and I have talked about many different use cases for the method we coded up, but in this case we have released the code embedded in a web application that searches JSON objects for you. If you&rsquo;ve been working with API and trying to make sense of your queries, we hope this helps!</p>

<p>Here&rsquo;s what you do:</p>

<ol>
<li><p>Copy your entire JSON object.</p></li>
<li><p>Visit <a href="http://datastroyer.herokuapp.com/">Datastroyer</a>.</p></li>
<li><p>Paste the JSON into the search box.</p></li>
<li><p>On the next screen, enter the search value you are looking for.</p></li>
</ol>


<p>Datastroyer will return all of the possible paths to this search value inside of the JSON.</p>

<p>If you don&rsquo;t have some JSON to search, you can <a href="http://datastroyer.herokuapp.com/data">try a sample search</a> with the data we&rsquo;ve provided.</p>

<p>At the end of the day, we think this is a learning tool to help you get more familiar with the structure of compound objects.</p>

<p>We hope you learn like we have!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Race to Hello World: Rails vs. Sinatra]]></title>
    <link href="http://dankleiman.github.io/blog/2014/06/23/the-race-to-hello-world-rails-vs-sinatra/"/>
    <updated>2014-06-23T08:11:28-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/06/23/the-race-to-hello-world-rails-vs-sinatra</id>
    <content type="html"><![CDATA[<p>Earlier, I explained how I built <a href="http://dankleiman.github.io/blog/2014/05/30/buying-a-mongolian-website/">my personalized url shortner</a> in Sinatra.</p>

<p>This past week, we&rsquo;ve been spinning up demo apps in Rails instead, so I wanted to walk through a little comparison of the two frameworks.</p>

<p>As <a href="https://github.com/radavis">one of our instructors</a> said, &ldquo;Sinatra is like a stripped-down muscle car and Rails is like an RV.&rdquo;</p>

<p>Here&rsquo;s how setting up a simple &ldquo;Hello, World!&rdquo; app breaks down between the two.</p>

<!-- more -->


<h2>Sinatra Set-Up</h2>

<p>To set up, &ldquo;Hello, Sinatra&rdquo; from the command line, follow these steps:</p>

<ol>
<li>$mkdir sinatra_hello</li>
<li>$cd sinatra_hello</li>
<li>$gem install sinatra</li>
<li>$touch app.rb</li>
<li>In your app.rb file, add:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="s2">&quot;Hello, Sinatra!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To see the locally running version, start the app with ruby app.rb and visit <a href="http://localhost:4567.">http://localhost:4567.</a></p>

<h2>Rails Set-Up</h2>

<p>From the same directory we started in, instead of creating the new directory like we did for sinatra, we will follow these steps:</p>

<ol>
<li>$rails new rails_hello</li>
<li>$cd rails_hello</li>
<li>$rails generate controller Posts</li>
<li>Add an index method to posts_controller.rb</li>
<li>define the root path in config/routes.rb to be &lsquo;posts#index&rsquo;</li>
<li>create a view for the root route that says &lsquo;Hello, Rails!&rsquo;</li>
</ol>


<p>Now, when we start up the rails server from the command line, we can visit <a href="http://localhost:3000">http://localhost:3000</a> and see our &lsquo;Hello, Rails!&rsquo; message.</p>

<h2>Simplicity vs. Structure</h2>

<p>As you can see from the code above, you need to install one gem and edit one file in your Sinatra version to get the basics working.</p>

<p>In that one file, you tell the server what to do with one HTTP &lsquo;GET&rsquo; request: where to go and what to display.</p>

<p>In contrast, in Rails, directing the request and displaying the response are delegate to different areas of the application:</p>

<ul>
<li>routes.rb interprets the &lsquo;GET&rsquo; request and sends us to the Posts Controller</li>
<li>inside the controller, there are instructions for what to do with the request for &ldquo;index&rdquo;</li>
<li>a specific view file (app/views/posts/index.html.erb) finally configures the response: &ldquo;Hello, Rails&rdquo; printed to the page.</li>
</ul>


<p>We were fortunate to work with HTTP requests a little more directly in Sinatra first, before we started relying on the conventions of Rails to more &ldquo;magically&rdquo; handle them for us.</p>

<p>At first, learning Rails feels like learning what files to put where to make the right thing happen.</p>

<p>When we worked out of a single server file in Sinatra, in contrast, we were tracking the different components of HTTP requests and responses more directly.</p>

<p>Coming away from these last two weeks of playing with Sinatra and Rails, I&rsquo;m glad we started with Sinatra for the directness, but I can also see, as our projects get bigger, how the conventions and structures of Rails will allow us to maintain clear, organized code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launch Academy: 5 Weeks in or 5 Weeks Left?]]></title>
    <link href="http://dankleiman.github.io/blog/2014/06/15/launch-academy-5-weeks-in-or-5-weeks-left/"/>
    <updated>2014-06-15T18:05:41-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/06/15/launch-academy-5-weeks-in-or-5-weeks-left</id>
    <content type="html"><![CDATA[<p>This past week marks the end of Week 5 at Launch Academy.</p>

<p>My head hurts a little bit when I try to give a quick summary of all we&rsquo;ve worked on. There&rsquo;s so much!</p>

<p>At the same time, I see the runway towards the end of the program getting shorter and shorter&hellip;</p>

<p>So are we 5 weeks in? Or do we only have 5 weeks left?</p>

<!-- more -->


<h2>Immersive Learning in the Short Term</h2>

<p>I&rsquo;m constantly weighing my learning experience here at Launch Academy &mdash; 10 weeks of coding &mdash; against my past immersive learning experiences in Tai Chi.</p>

<p>In 2011, I wrote <a href="http://imos-journal.net/work-rest-integration-%E2%80%9Csurviving-a-month-long-tai-chi-intensive-%E2%80%9D/">this piece for a Tai Chi blog</a> about the different cycles embedded in a month of Tai Chi Immersion.</p>

<p>Back then, one of the key takeaways for me was that you had to adop the right practice mindset.</p>

<blockquote><p>By finding the optimal daily training rhythm, you can begin to manage your energy over a month, though you will also need to adopt a particular mindset to apply the different facets of this new practice in succession.  How do you work on posture and alignment one minute and then flow the next?</p>

<p>The challenge of shifting gears like this is one thing I love about learning Tai Chi. Master Frantzis calls this process “separate and combine”. You have to train the first piece, without thinking about anything else, until it&rsquo;s totally integrated into how you move, then you work the second one. There&rsquo;s a leap of faith in between where you totally let go of the first piece before you switch to the second piece. In the moment, you can&rsquo;t worry about whether you will ever be able to do them both at the same time. “Separate” means really separate, physically and mentally. This method opens up the possibility for much deeper integration, but the tricky part is, you don&rsquo;t feel that way at first. The integration comes further down the road, in a place you can&rsquo;t see yet.</p></blockquote>

<p>At Launch Academy, we&rsquo;ve been working through similar cycles and I truly believe that my previous experience with Tai Chi Immersion has helped me prepare to manage the flow of these cycles.</p>

<p>For example, we were writing database queries in SQL then ActiveRecord and you had to get your head around the right syntax and relationships between tables BUT THEN we would shift gears to Rails and focus on the structure of a web application.</p>

<p>If you were still down in the details of how to write a query, you&rsquo;d miss the big picture differences between generating an output to the user, designing your database models, or directing traffic between them.</p>

<p>And it&rsquo;s not just that you need to be able to hold a lot of layered concepts in your mind at once. That&rsquo;s complex enough.</p>

<p><strong>The skill you need to master in an immersive learning environment is knowing when to let go, when to leave something alone, and when to spend more time on it.</strong></p>

<p>I&rsquo;ve struggled with this a lot. Do I need to know this now? Should I work through a few more example problems on this topic?</p>

<p>Or worse, you pick your head up from the weeds and realize that you haven&rsquo;t been productively working on this problem and the group has moved on.</p>

<p>I find, that give my previous experience, I&rsquo;m much more willing to drop things and refocus to new problems, without worrying about what I&rsquo;ve left behind.</p>

<h2>Long Term Payoff of Immersion</h2>

<p>Maybe &ldquo;just dropping&rdquo; something isn&rsquo;t the right way to describe the immersive learning skill I&rsquo;m talking about.</p>

<p>There&rsquo;s a stage between not knowing something and knowing it cold and due to the pace and duration of this program, we&rsquo;re swimming somewhere in between most of the time.</p>

<p>What you have to figure out in each subdomain that we touch is this: <strong>For now, am I acquianted enough with this concept to fit it into my mental model of the big domain, and do I know how to go deeper when I return to it in the future?</strong></p>

<p>Every fall, when I came back from 2, 3, or 4 weeks of Tai Chi, I would set out on the real learning process: slowly unpacking the immersive experience, and digesting the material in small, sustainable bites, over the next year or more.</p>

<p>I was fortunate to have the structure of a teaching schedule and an audience to teach to, so I had to be deliberate about revisiting material and I had to articulate it clearly. Those constraints helped my practice grow enormously.</p>

<p>Immersive bursts of training were the seeds of my practice and the school was a garden where they could grow.</p>

<p>The big payoff of short term immersive learning doesn&rsquo;t happen in the short term at all. It happens when the seeds of learning are allowed to grow over many seasons.</p>

<p>In Tai Chi terms, that was always clear to me. For coding? All I can tell you now is that I will have the chance to create the same garden, through a work environment, to let the seeds of immersion grow.</p>

<p>What&rsquo;s exciting is that I don&rsquo;t quite know what these seeds will yield!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asking Questions: The Holy Grail of OOP]]></title>
    <link href="http://dankleiman.github.io/blog/2014/06/08/asking-questions-the-holy-grail-of-oop/"/>
    <updated>2014-06-08T20:32:17-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/06/08/asking-questions-the-holy-grail-of-oop</id>
    <content type="html"><![CDATA[<p>This week at Launch Academy, we started working on Object Oriented Programming (OOP).</p>

<p>We&rsquo;ve been guided by the conceptual model that objects, which can have state and defined behavoirs, respond to methods the same way that you would respond to a question.</p>

<p>Of course, a week of asking my objects questions made me think of this:</p>

<!-- more -->




<iframe width="640" height="480" src="//www.youtube.com/embed/pWS8Mg-JWSg" frameborder="0" allowfullscreen></iframe>


<p>And the more I thought about The Bridge of Death, the more the Bridgekeeper&rsquo;s questions made a lot of sense in our OOP world.</p>

<p>Really, we&rsquo;ve got a collection of Knights and each one responds to a series of questions. If we coded that up, it would look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Knight</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:quest</span><span class="p">,</span> <span class="ss">:favorite_color</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">intialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">quest</span><span class="p">,</span> <span class="n">favorite_color</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@quest</span> <span class="o">=</span> <span class="n">quest</span>
</span><span class='line'>    <span class="vi">@favorite_color</span> <span class="o">=</span> <span class="n">favorite_color</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our knights, Sir Lancelot, King Arthur, or Sir Galahad, are all instances of the class &ldquo;Knight.&rdquo; They are objects with contain a state (their specific names, quests, etc) and behaviors.</p>

<p>When it comes to behaviors, they can inherit them in some cases, or the behaviors have to be explicitly defined within the class.</p>

<p>In the clip above, we can see how the knights know how to answer the questions about their names and quests&hellip;they respond to the name and quest methods defined in their class.</p>

<p>But we also see something else.</p>

<p>When Robin approaches the bride, the Bridgekeeper asks him his name and quest:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">robin</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="n">robin</span><span class="o">.</span><span class="n">quest</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that produces the answers we&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Robin of Camelot&quot;</span>
</span><span class='line'><span class="s2">&quot;To seek the Holy Grail&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But then the Bridgekeeper throws a curveball. He calls</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">robin</span><span class="o">.</span><span class="n">capital_of_assyria</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>When Robin is asked what the capital of Assyria is, he literally blows up. From an OOP perspective, we know it was because this behavior was never defined for the class Knight:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">capital_of_assyria</span>
</span><span class='line'>  <span class="sc">????</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course, there&rsquo;s a further twist when the Bridgekeeper tries to call</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">airspeed_velocity_of_an_unladen_swallow</span>
</span></code></pre></td></tr></table></div></figure>


<p>on King Arthur, but really, you should watch the clip if you don&rsquo;t already know what happens.</p>

<h2>Asking Questions, Building Objects</h2>

<p>So, now we know that you have to define the behaviors you want to utilize to do effective object-oriented programming.</p>

<p>But why? What&rsquo;s the point? Or more importantly, what&rsquo;s the advantage of writing code this way.</p>

<p>I&rsquo;m sure there are bigger implications of taking this approach, but I can tell you that right away, my experience of writing simple code is completely different.</p>

<p>When you set out to build classes and objects, you actually don&rsquo;t need to know everything about how your program works right away to make progress.</p>

<p>Instead of figuring out every detail of every loop, calculation, and variable, <strong>you can assume that the classes and methods you create will give you the answer you want.</strong></p>

<p>You are free to write more semantic, flowing code from the beginning, without having to stop and figure out the nitty-gritty.</p>

<p>Even in my limited experience taking this approach, I can tell you that it lets you think at a high level about your problem, sketching out the logic, flow, and just marking out the big areas you know you&rsquo;ll tackle later on.</p>

<p>Gradually, layer-by-layer, you go deeper and work out the details.</p>

<p>I wish I had had a clear top-down model like this to solve problems in the past. Here&rsquo;s to applying it going forward!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buying a Mongolian Website for My URL Shortner]]></title>
    <link href="http://dankleiman.github.io/blog/2014/05/30/buying-a-mongolian-website/"/>
    <updated>2014-05-30T09:17:22-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/05/30/buying-a-mongolian-website</id>
    <content type="html"><![CDATA[<p>Ok, so technically I just purchased a Mongolian domain name: <a href="http://klei.mn">klei.mn</a>.</p>

<p>Why, you might be wondering?</p>

<!-- more -->


<p>This week at Launch Academy we&rsquo;ve been building Sinatra applications with simple databases (Redis and Postgres) and deploying them to Heroku.</p>

<p>One of the extra-credit projects was to build a url shortner and I thought it would be cool to hook mine up to a customized domain, kind of like a vanity plate for your car.</p>

<p>In this post, I&rsquo;m going to explain why you might want a URL shortner and how I built and deployed my own custom version.</p>

<h2>The Basic Logic of a URL Shortner</h2>

<p>Sometimes, when you&rsquo;re sharing the url of a website, the address can be really, really long.</p>

<p>This is problematic if you&rsquo;re trying to dictate the url to someone, have to write it out by hand for some reason, or if you want to share it somewhere with space constraints, like on Twitter.</p>

<p>The idea behind a url shortner is that you can generate a shorter url whose sole purpose is to redirect to the longer url. Now, you can use a much shorter, more manageable set of characters to describe the same page.</p>

<p>Often, the domain of the url itself is only a few characters long, further truncating the &ldquo;short url&rdquo; &mdash; examples include Twitters own service, t.co, or a free service anyone can access like bit.ly.</p>

<p>Many sites like the New York Times have created prorietary domains just to shorten their own links, which is a combination of branding when the short domain resembles the name of the company or main site and a tracking tool, which I&rsquo;ll explain more further down this post.</p>

<h2>My Mongolian Domain Name</h2>

<p>So, when I said this was a bit of a vanity project for me, what I meant was, I took my last name &ldquo;Kleiman&rdquo; and tried to think of a way to shrink it down to fit a small domain name.</p>

<p>Using something like &ldquo;DansShortUrlforShorteningLongUrls.com&rdquo; would totally defeat the purpose, right?</p>

<p>I had seen the &ldquo;.mn&rdquo; Top Level Domain (TLD &ndash; that&rsquo;s the extension on any url, like .com), so I poked around a little to see about purchasing one.</p>

<p>It turns out that the more obscure TLDs aren&rsquo;t for sale on all of the popular domain resellers, but after a little digging, I did <a href="http://domain.mn">find a site</a> that sells .mn domains &mdash; and it turns out that the country that owns that TLD is Mongolia.</p>

<p>Nothing like starting your morning off with a little international commerce!</p>

<h2>The Final Step: Deploying the App</h2>

<p>So, last thing first, then we&rsquo;ll talk about the code.</p>

<p>When you deploy an application to <a href="http://heroku.com">Heroku</a>, they host your code on a server and set you up with a subdomain.</p>

<p>Their subdomains are pretty elegantly named. They always conjure dark, quiet, rustic imagery, like &ldquo;sleepy-journey&rdquo; or &ldquo;damp-retreat&rdquo;.</p>

<p>Again, though, the problem is that &ldquo;stormy-stream-3295.herokuapp.com&rdquo; doesn&rsquo;t really lend itself to a short url.</p>

<p>I saved this for the final step, but after the app (ok, version 1) was up and running, I went through the process of redirecting the Heroku default domain to my newly acquired, shorter Mongolian domain name, klei.mn.</p>

<p>Just want to give a shoutout here to <a href="http://dnsimple.com">DNSimple</a> for making the redirect process really painless. Initially, I tried to mess around with the records that tell any requests from the browser where to go for the page you want on the site where I bought the domain name. It was a mess.</p>

<p>Fortunately, DNSimple has an easy process for redirecting and within minutes, the app was running from Heroku on klei.mn. Really Simple!</p>

<p>The only other hiccup I encountered in deployment was that the free Redis database I was using kept timing out with the number of requests the app was making, even for some simple testing. Since we had moved on to Postgres in class, I rewrote the app to use that instead. As it turns out, the data structure in Postgres was much easier to use anyway, even if it was probably overkill, with a single table in this case.</p>

<p>I hope to come back to the differences in working with these two databases, but that&rsquo;s for another time and post.</p>

<h2>Building the URL Shortner in Sinatra</h2>

<p>At Launch Academy, we&rsquo;ve been following a really neat learning progression, where we&rsquo;re building up gradually to the complexity of a full stack web application, specifially built with Ruby on Rails.</p>

<p>While we&rsquo;ve been working on our Ruby fundamentals all along, there are at least three other areas that can be broken down into simpler steps:</p>

<ul>
<li>The Framework that integrates what the user sees with the information stored in the database.</li>
<li>The Database, in terms of its organization and how the application interacts with data.</li>
<li>The Front-End interaction for the user.</li>
</ul>


<p>For this project, I&rsquo;m going to explain where we&rsquo;re at mainly regarding the framework.</p>

<p>We started out with the simplest way to run a Ruby program, executing a Ruby file from the command line.</p>

<p>When we were just learning Ruby, this was fine. We didn&rsquo;t have a lots of data and the programs were simple enough that all of the logic could easily fit in one file. Plus, the interface was bare bones, just the simple, elegant command line (I&rsquo;ll probably write more about falling in love the command line later, ha!).</p>

<p>And even when we wanted to use more complex data, we learned how to read and write with local files or even pull in data from APIs.</p>

<p>To persist information and access it more dynamically, though, we quickly ran up against the limits of our CSV files and started to need to query databases.</p>

<p>Interacting with a database leads to moving dynamic information around between all your different files, selectively displaying it to you user.</p>

<p>To control the data this way, you need an extra layer, between the user and the database, essentially to direct all this traffic and figure out what to do next. Enter, &ldquo;the framework.&rdquo; In this case, we started out with a simple one (I&rsquo;m told) called Sinatra.</p>

<p>In production, your Sinatra app likely includes the following files:</p>

<ul>
<li>A file to tell the server how to being your program.</li>
<li>A &ldquo;server&rdquo; file that the program runs from, directing traffic, executing program logic, and interacting with the database.</li>
<li>&ldquo;Views&rdquo; that dictate what gets displayed on each page the application serves up.</li>
<li>In Ruby, &ldquo;Gemfiles&rdquo; that tell the server what Ruby Gems will be needed to perform specific tasks in the application.</li>
</ul>


<p>From what I understand, compared to a more robust framework like Rails, Sinatra&rsquo;s simplicity lies in the way all of your routes (links between the data and the views) live in a single file.</p>

<p>At least for us, at this stage, it made sorting out all the program logic easier, since you only have to look in one place. One the flip side, I can see how this gets messy as you go up in complexity, but that&rsquo;s what&rsquo;s cool about our curriculum: when increased complexity/difficult necessitates new tools to handle the issue, we are introduced to them, <em>but not before</em>.</p>

<h2>And Now for Some Code</h2>

<p>There are two operations at the heart of this project: <strong>creating short urls and redirection</strong>.</p>

<p>I want to turn the long url that you give me into a short one AND every time you visit the short one, I want to send you to the long one.</p>

<p>Along the way, if I can <a href="http://klei.mn/stats">track how often this is happening for each short url</a>, that will be cool too.</p>

<p>When you visit <a href="http://klei.mn">klei.mn</a>, hopefully, the action is clear: give me a url to shorten.</p>

<p>Here&rsquo;s what the shortening code looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post</span> <span class="s1">&#39;/new&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:url</span><span class="o">]</span>
</span><span class='line'>  <span class="vi">@errors</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@errors</span> <span class="o">=</span> <span class="n">valid_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@errors</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">long_url</span> <span class="o">=</span> <span class="n">check_long_url</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">long_url</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="n">short_url</span> <span class="o">=</span> <span class="n">get_short</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>      <span class="n">save_link</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">short_url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">short_url</span> <span class="o">=</span> <span class="n">long_url</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s2">&quot;short_url&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="s2">&quot;/links/</span><span class="si">#{</span><span class="n">short_url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:index</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what it does:</p>

<ul>
<li>Once you hit &ldquo;Shorten&rdquo; on the main page, you send the server the &ldquo;post&rdquo; request.</li>
<li>First, I&rsquo;m going to make sure what you put in the form is a valid url.</li>
<li>Then, I want to check and make sure that the url you sent me isn&rsquo;t already in the database.</li>
<li>If it is, I will send you to the page that already exists for that link: klei.mn/links/(some short url), that shows the full url, the short url, and click stats.</li>
<li>If it&rsquo;s not in the database, I create a new short url for it and insert that new info into the database with the &ldquo;save_link&rdquo; method.</li>
</ul>


<p>Check out the stats page for <a href="http://klei.mn">all shortened urls</a>.</p>

<p>You&rsquo;ll notice that <a href="https://twitter.com/heroiceric">one clever person</a> I asked to test the site started by shortnening the main domain, then kept entering the returned short urls into the shortner. Now, every time you use the last link, it redirects you to the main page, <em>via all the other shortened urls and all their click stats go up</em>. (I&rsquo;ll likely disable the ability to submit urls with klei.mn as the domain by the time you read this.)</p>

<p>Now that you&rsquo;ve created or retreived a short url for your long link, you&rsquo;ll want to use it.</p>

<p>Here&rsquo;s what happens when you enter one of the short urls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/:short_url&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">short_url</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:short_url</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">short_url</span> <span class="o">==</span> <span class="s1">&#39;stats&#39;</span>
</span><span class='line'>    <span class="vi">@url_stats</span> <span class="o">=</span> <span class="n">get_all_url_stats</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&#39;stats&#39;</span>
</span><span class='line'>  <span class="k">elsif</span> <span class="n">short_url</span> <span class="o">==</span> <span class="s1">&#39;about&#39;</span>
</span><span class='line'>    <span class="n">erb</span> <span class="ss">:&#39;about&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">add_clicks</span><span class="p">(</span><span class="n">short_url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outgoing_link_data</span> <span class="o">=</span> <span class="n">get_long_url</span><span class="p">(</span><span class="n">short_url</span><span class="p">)</span>
</span><span class='line'>    <span class="n">outgoing_link</span> <span class="o">=</span> <span class="n">outgoing_link_data</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s2">&quot;long_url&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">redirect</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">outgoing_link</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what&rsquo;s going on in the code:</p>

<ul>
<li>First, I grab the slug, or the part of the url after &ldquo;klei.mn/&rdquo;, from the &ldquo;get&rdquo; request.</li>
<li>Since all the short urls are klei.mn/something, there have to be a few exceptions for any other page I want to have on the site, like &ldquo;klei.mn/stats&rdquo; or &ldquo;klei.mn/about&rdquo;. <em>Maybe there&rsquo;s another way to do this?</em></li>
<li>Once I&rsquo;ve determined that it&rsquo;s one of the short urls, I want to send you to the url you&rsquo;re actually looking for. But first, I want to increase the click count for that url. The first method, &ldquo;add_clicks&rdquo;, adds a click to the counter for that url. Yay, semantic naming conventions!</li>
<li>Next, we need to go get the corresponding long url from the database, so we know where to send you.</li>
<li>Finally, we redirect to the long url.</li>
</ul>


<p>Before I really knew how servers sent and received information, this whole redirecttion process seemed like a little bit of magic.</p>

<p>Writing this up, now, though, it all feels pretty straightforward, don&rsquo;t you think?</p>

<p>You ask me to go somewhere. I look up directions and send you on your way to the destination you actually want. Maybe this is a version of &ldquo;give them what they want in the hope that they&rsquo;ll want what they need?&rdquo;</p>

<p>Which leads me to a more dilemma about shortening urls&hellip;.is it really what we want to be doing?</p>

<h2>The Problem with URL Shortnening</h2>

<p>I mentioned this project to a former board member of the [Web Foundation](<a href="http://webfoundation.org,">http://webfoundation.org,</a> whose mission is to &ldquo;establish the open Web as a global public good and a basic right, ensuring that everyone can access and use it freely.&rdquo; and he said &ldquo;you know that&rsquo;s not a good idea, right?&rdquo;</p>

<p>It&rsquo;s not that he&rsquo;s against me learning to code. He&rsquo;s been very supportive. ;&ndash;)</p>

<p>But what he and his colleagues do is think about the world wide web on a much longer time scale that most people typically do.</p>

<p>Our use case for the short url is really about convenience. They think about persistence, connectivity, and meaning.</p>

<p>By inserting short urls all over the place to direct connections around the web, we are potentially creating a lot of dead-ends if the short url domains go away.</p>

<p>From what I gathered from him, there is also a semantic isssue, when you compare short urls and their longer parents.</p>

<p>The short links posted everywhere won&rsquo;t really mean anything, compared to the more detailed long urls they are derived from.</p>

<p>Wikipedia has more on the shortcomings of URL shortnening <a href="http://en.wikipedia.org/wiki/URL_shortening#Shortcomings">here</a>.</p>

<p>Can you make the case either way? Does it make sense in a more closed ecosystem like Twitter? Am I being an irresponsible citizen of the net by introducing short urls for vanity and convenience?</p>

<p>These all seem like interesting questions!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Learning Tool for Compound Data Structures]]></title>
    <link href="http://dankleiman.github.io/blog/2014/05/25/building-a-learning-tool-for-compound-data-structures/"/>
    <updated>2014-05-25T09:07:15-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/05/25/building-a-learning-tool-for-compound-data-structures</id>
    <content type="html"><![CDATA[<p>One of the most challenging things about learning to work with compound data structures has been reading the nested hashes and arrays and extracting the right set of brackets to use to identify a particular value in your code.</p>

<!-- more -->


<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="n">movie</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;The Nutty Professor&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">cast</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Eddie Murphy&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">characters</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>            <span class="s1">&#39;Sherman Klump&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Buddy Love&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Lance Perkins&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Papa Klump&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Mama Klump&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Grandma Klump&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Ernie Klump&#39;</span>
</span><span class='line'>          <span class="o">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jada Pinkett Smith&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">characters</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>            <span class="s1">&#39;Carla Purty&#39;</span>
</span><span class='line'>          <span class="o">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I want to find a character, I have to reference an array inside a hash inside an array inside a hash&hellip;I think. Even that last sentence was difficult to write.</p>

<p>So I started thinking&hellip;there must be a programmatic way to express finding the reference for any element of the compound data structure.</p>

<h2>Decompose the Problem</h2>

<p>Here&rsquo;s the problem statement:  <strong>Given a value and a compound data structure, return the position of the value in the strucure, formatted so you can referrence it in your code.</strong></p>

<p>The first thing you realize is that searching through a hash and array will work slightly differently. On the advice of my instructors, I separated out these cases and got to work on the smallest case first.</p>

<p>Breaking it down into steps looked something like this:</p>

<ol>
<li>Solve just the array case first.</li>
<li>Start with the smallest possible array.</li>
<li>Add layers of nesting and make sure it still works.</li>
<li>Then, modify the searching for hashes.</li>
<li>Combine.</li>
</ol>


<p>Most of the work happened in step 3, where we run into the problem of tracking the correct path to our value through recursive calls to the search method.</p>

<p>Struggling through the recursion in this problem, I started to wonder if I had traded one problem, learning to read compound data structures, for another: <em>figuring out recursive searching!</em></p>

<h2>Working through Search Recursively</h2>

<p>Check out the suggested search for &ldquo;recursion&rdquo; when you Google it:</p>

<p><a><img src="http://i.imgur.com/3rKK7mF.png" title="Hosted by imgur.com" /></a></p>

<p>Ha! Yeah, I clicked on &ldquo;Did you mean? recursion&rdquo; a few times just to check.</p>

<p>Anyway, since we don&rsquo;t know how big the data structure is, we have to keep searching through unknown elements, that could be value, hashes, or arrays that need to be looked through in turn as well.</p>

<p>This is a job for recursion!</p>

<p>Looking at <a href="http://en.wikipedia.org/wiki/Inorder_traversal#Depth-first">tree traversal search problems</a>, I realized I needed to move through a tree structure and needed to track where I was on the tree…but couldn&rsquo;t figure out at first how to track the path.</p>

<p>The first pass at the problem returned an array of every endpoint of every possible path. Each element of the returned &ldquo;path&rdquo; array came back as true or false relative to the value we were searching for…but there were no breadcrumbs to know what the path was for the true version. <em>To solve the problem, we needed to return a path, not just know that the value was in the data structure</em></p>

<p>To identify the path, we capturing the index of the current element we were testing in the array. We&rsquo;d add them once we new we had a true path on the way &ldquo;back up&rdquo; the recursion. This was messing with the order, though.</p>

<p>Finally, (in the shower, of course!) I realized that adding to the path should happen just before the recursive call AND if the call came back &ldquo;false&rdquo;, we should strip out the path identifier right after the call came back.</p>

<p>Adding to the path:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">path</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Removing the &ldquo;wrong branch&rdquo; from the path after the recursive call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="n">path_finder</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">path</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In other words, a &ldquo;not-true&rdquo; return would tell us that we went down the wrong branch and so we should erase that branch and start going down the next possible branch.</p>

<p>After I got the correct path to return, it was just a matter of cleaning it up and presenting it in a way that would let you &ldquo;copy and paste&rdquo; into your code for easy referrence.</p>

<p>I hope this comes in handy when other people are learning to read compound data structures!</p>

<p><a href="https://github.com/dankleiman/path_finder">Check out the repo on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Day 10: The Dreams Continue]]></title>
    <link href="http://dankleiman.github.io/blog/2014/05/21/day-10-the-dreams-continue/"/>
    <updated>2014-05-21T08:02:38-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/05/21/day-10-the-dreams-continue</id>
    <content type="html"><![CDATA[<p>It happened again.</p>

<p>At 5:00am this morning I woke myself up&hellip;.talking through a solution to a coding problem I had at the end of the day yesterday.</p>

<p>I was literally coding in my sleep.</p>

<p>Remember the <a href="http://dankleiman.github.io/blog/2014/05/17/launch-academy-week-1-reflections/">Tetris Effect</a>? It&rsquo;s in full effect.</p>

<p>But I&rsquo;ve seen this before and once I got over the shock of writing code in my sleep, I got pretty excited. It means some serious learning is going on.</p>

<!-- more -->


<h2>Intensive Learning and Brain Cycles</h2>

<p>In 2004, I attended my first qigong (pronounce &ldquo;chee-gung,&rdquo; it&rsquo;s the Chinese practice of developing your natural internal energy. You can read more about my background in this practice <a href="http://dankleiman.com">here</a>) instructor training.</p>

<p>We trained 8-10 hours a day and we were about 10 days in before we got a day off.</p>

<p>It was July in Northern California and we decided to escape the heat by going to see a movie.</p>

<p>I rememember sitting in the theatre and looking down at my hands. They were pulsing in and out, getting bigger and smaller&hellip;.and I wasn&rsquo;t doing anything.</p>

<p>I should tell you that the main practice we were working on, called &ldquo;Opening and Closing&rdquo; involves manipulating the synovial fluids of the joints and the ligaments so that the joint spaces shrink and expand in a rhythm&hellip;but we do it under direct, conscious control.</p>

<p>Sitting in the theatre, I was zoning out to Spider Man or some other summer blockbuster. In my tuned-out state, my body was going all by itself.</p>

<p>Strange. Alien. And, as I later learned, a totally natural way to process new input, whether it&rsquo;s physical or mental.</p>

<p>Our nervous systems need time to process new information and integrate it. <strong>It turns out that this kind of integration is best done unconscously.</strong></p>

<p>In fact, I&rsquo;ve been experiencing less extreme examples too. Every time you get up, step away from the computer, and do a different activity, you give your unconscious mind a chance to catch up and process.</p>

<p>So, bathroom trips, conversations in the kitchen, a run down the stairs and out onto the street &mdash; all these activities, or <em>un-activities</em> create an opportunity for passive processing.</p>

<p>My goal is to keep up, as strange as it sounds, deliberate un-deliberate times to maximize learning and work, because the truth is, these things are circular &mdash; rest completes work &mdash; not linear.</p>

<p>I&rsquo;ve written about how this works from a Tai Chi perspective too, <a href="http://dankleiman.com/2013/04/23/practice-rhythms-at-tai-chi-immersion-week/">if you&rsquo;re curious to read more</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Launch Academy: Week 1 Reflections]]></title>
    <link href="http://dankleiman.github.io/blog/2014/05/17/launch-academy-week-1-reflections/"/>
    <updated>2014-05-17T09:32:59-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/05/17/launch-academy-week-1-reflections</id>
    <content type="html"><![CDATA[<p>So, all this week, I&rsquo;ve been experiencing the Tetris effect and I&rsquo;ve come to appreciate the beauty, and the painlessness, of learning how to break down a problem.</p>

<p>Let me explain&hellip;.</p>

<!-- more -->


<h2>The Tetris Effect</h2>

<p>According to <a href="http://www.scientificamerican.com/article/tetris-dreams/">the study from Harvard Medical School</a>, games like Tetris can reveal the way our brain integrates new information.</p>

<blockquote>In fact, the game Tetris has proved to be just that. Robert Stickgold and his colleagues at Harvard Medical School recently conducted a clever set of experiments in which they used the game to guide the content of people¿s dreams: among 17 subjects they trained to play Tetris, more than 60 percent reported dreaming of images associated with the game. </blockquote>


<p>I&rsquo;ve been having similar dreams about coding all week, especially as I&rsquo;m falling asleep.</p>

<p>In fact, I&rsquo;ve had to resist the urge to jump out of bed and grab my laptop to finish coding problems that plagued me during the day.</p>

<p>What&rsquo;s so cool is that my instructors at Launch Academy have been talking from the beginning about the way coding &mdash; and more generally the brain &mdash; works. They&rsquo;ve been extremely clear about the value of stepping away from the computer to actually find the solution.</p>

<p>I love being immersed in this environment where the answers to &ldquo;my work&rdquo; pour in at night, or on breaks, and more importantly, these down moments are treated as equally valuable as work time.</p>

<h2>Shoring Up Fundamentals</h2>

<p>All week, we&rsquo;ve been reviewing pre-work and solidifying our Ruby basics.</p>

<p>Specifically, here&rsquo;s what we&rsquo;ve been covering:</p>

<p><em>Ruby fundamentals
</em>Hashes, arrays, and compound data structures
<em>Iteration
</em>File IO</p>

<p>Launch Academy has some pretty cool custom tools to help us do this work. I&rsquo;m sure you&rsquo;ve seen things like CodeAcademy or RubyMonk.</p>

<p>At Launch Academy, we have internal tools that integrate shell commands to download, test, and submit practice problems. What I love about this is that not only are we honing our Ruby fundamentals, but we&rsquo;re integrating other skills, like command line basics, git, and a broader understanding of how to navigate the file system.</p>

<p>Next week, I think we&rsquo;re going to expand this work to include remote repositories.</p>

<p>Even though it&rsquo;s been a few days, it feels like it&rsquo;s been months of immersion and I can&rsquo;t wait to get back to work on Monday!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on Pre-Work: Balancing Theory and Practice]]></title>
    <link href="http://dankleiman.github.io/blog/2014/05/09/this-is-new-post/"/>
    <updated>2014-05-09T12:18:25-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/05/09/this-is-new-post</id>
    <content type="html"><![CDATA[<p>Preparing for <a href="http://www.launchacademy.com">Launch Academy</a>
while finishing up work as the director <a href="http://www.brooklinetaichi.org">Brookline Tai Chi</a> has been a massive exercise in balancing &ldquo;theory and practice.&rdquo;</p>

<p>This explanation from Practical Object-Oriented Design in Ruby by Sandi Metz perfectly captures the difference:</p>

<!-- more -->




<blockquote>What is the difference between theory and practice?
In theory, there is none. If theory were practice you could learn the rules of OOD, apply them consistently, and create perfect code from this day forward; your work here would be done.

However, no matter how deeply theory believes this to be true, practice knows better. Unlike theory, practice gets its hands dirty. It is practice that lays bricks, builds bridges, and writes code. Practice lives in the real world of change, confusion, and uncertainty.</blockquote>


<p>I&rsquo;ve been straddling the worlds of theory and practice for months now.</p>

<p><strong>Learning to Code <em>in Theory</em></strong></p>

<p>Every book, online tutorial, and exercise that I&rsquo;ve been working on, in Ruby, HTML, CSS, MySQL, has been carefully selected by the instructors at Launch Academy to lead us step-by-step through the basics.</p>

<p>The examples are clean.</p>

<p>Instructions are clear.</p>

<p>And when we get stuck, we can reach out for help and clarification.</p>

<p>It&rsquo;s a pleasure to live in this world</p>

<p><strong>Teaching Tai Chi <em>in Practice</em></strong></p>

<p>For the last ten years, I&rsquo;ve been teaching Tai Chi, working with students who are brand new to the practice or who are gradually building new skills.</p>

<p>Early on, I learned from my teaching mentor that you should only ever teach material that is well integrated into your own body, so that you can model it clearly, cleanly, and on demand.</p>

<p>The process of translating Tai Chi theory, embodied principles, and new concepts to something that students can absorb is an exercise in moving from the clean world of theory to the messy realm of practice.</p>

<p>How will they interpret a lesson?</p>

<p>What else are they thinking about when they come to class at night?</p>

<p>Is there something they&rsquo;d rather do with their time?</p>

<p>How do we handle layers of old injuries?</p>

<p>Being on the other side of the theory and practice dichotomy has its own rewards, <a href="http://dankleiman.com/about/">which I&rsquo;ve written about here</a>.</p>

<p>Right now, though, I&rsquo;m enjoying being in both worlds simultaneously. I can appreciate all the work the staff at Launch Academy has done to present us with clean, clear instructions.</p>

<p>I&rsquo;m also getting a little space from my own teaching, so I can appreciate the more abstract, theoretical questions of how, why, and what should be taught, unencumbered by a lot of practical constraints.</p>

<p><strong>Balancing Theory and Practice in the Future</strong></p>

<p>Going forward, months from now, when I&rsquo;m fully immersed in the world of web applications and my day-to-day will lean more to the &ldquo;practice&rdquo; end of the balance than the &ldquo;theory&rdquo; side, I hope I can remember this feeling of blending both worldviews.</p>

<p>By creating space to find a clean &ldquo;theory&rdquo; mindset, you really do get more energy to implement the realities of &ldquo;practice.&rdquo;</p>

<p>At the same time, the craftmanship of practice motivates you to explore and refine theory.</p>

<p>If I can find the right balance, work life will be even more rewarding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting a Feel for It]]></title>
    <link href="http://dankleiman.github.io/blog/2014/03/20/getting-a-feel-for-it/"/>
    <updated>2014-03-20T08:59:31-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/03/20/getting-a-feel-for-it</id>
    <content type="html"><![CDATA[<p>&ldquo;I just want to get a feel for what I can change/do&hellip;&rdquo;</p>

<p>Or</p>

<p>&ldquo;I just wanted to see what I could do&hellip;&rdquo;</p>

<p>In the middle of launching this blog, I wanted to change some of the core settings and I wasn&rsquo;t sure what could safely be changed without breaking the whole thing.</p>

<p>When I asked someone for help, I explained that I wanted to &ldquo;get a feel&rdquo; for what I could do without messing other things up.</p>

<!-- more -->


<h2>How Would You Have Phrased That?</h2>

<p>I didn&rsquo;t used to make a big distinction between these two ways of phrasing, but as I&rsquo;m reading <a href="http://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Thinking and Learning by Andy Hunt</a>, I&rsquo;m starting to become much more acutely aware of all these layers of filters, perspectives, and contexts that we each have for experiencing the world that influence what we see, say, and do.</p>

<p>For instance, what you value and how you communicate may be shaped by:
&ndash; your personality type, notably your degree of introversion or extroversion (I love thinking of this as &ldquo;how you recharge your batteries &mdash; from the inside or from other people&rdquo;)
&ndash; the generation you were born, even in the sense of how you see the role of institutions/companies that you interact with (need to read up on this more, but some people have theorized that there are only 4 generational archetypes that repeat over and over again, largely created and re-created in reference to the previous generation)
&ndash; the primary senses you use to take information in (often described in an educational context as learning style, i.e. visual, auditory, or kinesthetic)</p>

<h2>Starting to Notice Filters and Cues</h2>

<p>After reading the chapter on sensory filters, I spent the day trying to pick up on subtle language cues that people dropped as I talked to them.</p>

<p>Specificially, I was <a href="http://dankleiman.com">teaching Tai Chi lessons</a> that day, so once I heard a clear cue (&ldquo;I see what you&rsquo;re saying&hellip;&rdquo;), I tried to adapt the teaching to cater to that style.</p>

<p>My first attempt was too heavy-handed, though, and it just ended up confusing my student.</p>

<p>Fascinating to keep trying this approach, though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning More About Octopress]]></title>
    <link href="http://dankleiman.github.io/blog/2014/03/19/learning-more-about-octopress/"/>
    <updated>2014-03-19T18:46:22-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/03/19/learning-more-about-octopress</id>
    <content type="html"><![CDATA[<p>Just running through a test post again to go over the process and remind myself how this works!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Whoa! Octopress!]]></title>
    <link href="http://dankleiman.github.io/blog/2014/03/18/whoa-octopress/"/>
    <updated>2014-03-18T21:28:17-04:00</updated>
    <id>http://dankleiman.github.io/blog/2014/03/18/whoa-octopress</id>
    <content type="html"><![CDATA[<p>So, I just launched this new blog using Octopress.</p>

<p>Here are the steps I followed:</p>

<ul>
<li><a href="http://octopress.org/docs/setup/">Basics</a></li>
<li><a href="http://octopress.org/docs/blogging/">How to Blog</a></li>
<li><a href="http://octopress.org/docs/deploying/github/">Deploying on Github</a></li>
</ul>


<p>I need to dig into the <a href="http://octopress.org/docs/configuring/">configuration stuff</a> a little more.</p>

<!-- more -->


<h2>Writing This Post in Markdown</h2>

<p>I&rsquo;m learning how to write this in <a href="http://http://daringfireball.net/projects/markdown/basics">Markdown</a> which is also pretty new to me. Right now it feels like a lazy version of html, so we&rsquo;ll see what&rsquo;s it like as I get used to it.</p>
]]></content>
  </entry>
  
</feed>
